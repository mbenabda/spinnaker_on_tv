// GET pipelines/bce7e16b-128e-4c75-a5f5-f1e507ac8a37
//status: NOT_STARTED, RUNNING, SUCCEEDED, TERMINAL

{
    "application": "hotelavailabilities",
    "authentication": {
        "allowedAccounts": [
            "dev",
            "test",
            "preprod",
            "private-registry"
        ],
        "user": "anonymous"
    },
    "buildTime": 1507291289645,
    "canceled": false,
    "canceledBy": null,
    "cancellationReason": null,
    "context": {

    },
    "endTime": null,
    "executionEngine": "v3",
    "id": "bce7e16b-128e-4c75-a5f5-f1e507ac8a37",
    "initialConfig": {

    },
    "keepWaitingPipelines": false,
    "limitConcurrent": true,
    "name": "Deploy UNSTABLE artifact to DEV",
    "notifications": [{
        "address": "dev_supply_ci",
        "level": "pipeline",
        "message": {
            "pipeline.complete": {
                "text": "Awesome ! version 1.4.1-unstable50-171005164021 is deployed !"
            },
            "pipeline.failed": {
                "text": "Deployment of version 1.4.1-unstable50-171005164021 failed"
            },
            "pipeline.starting": {
                "text": "Deploying version 1.4.1-unstable50-171005164021"
            }
        },
        "type": "slack",
        "when": [
            "pipeline.starting",
            "pipeline.complete",
            "pipeline.failed"
        ]
    }],
    "origin": "deck",
    "paused": null,
    "pipelineConfigId": "d6fd4103-e2bf-426c-9892-8ac26527fb48",
    "stages": [{
            "context": {
                "account": "dev",
                "application": "hotelavailabilities",
                "cloudProvider": "kubernetes",
                "containers": [{
                    "args": [

                    ],
                    "command": [

                    ],
                    "envVars": [{
                            "name": "RABBITMQ_HOST",
                            "value": "rabbitmq-service"
                        },
                        {
                            "name": "RABBITMQ_PORT",
                            "value": "5672"
                        },
                        {
                            "name": "RABBITMQ_VHOST",
                            "value": "/"
                        },
                        {
                            "envSource": {
                                "secretSource": {
                                    "key": "username",
                                    "secretName": "rabbitmq-secret"
                                }
                            },
                            "name": "RABBITMQ_USERNAME"
                        },
                        {
                            "envSource": {
                                "secretSource": {
                                    "key": "password",
                                    "secretName": "rabbitmq-secret"
                                }
                            },
                            "name": "RABBITMQ_PASSWORD"
                        }
                    ],
                    "imageDescription": {
                        "account": "private-registry",
                        "fromTrigger": true,
                        "imageId": "docker.weekendesk.com:5000/hotel-availabilities-ingestion:.*-unstable[0-9]+-.+",
                        "registry": "docker.weekendesk.com:5000",
                        "repository": "hotel-availabilities-ingestion",
                        "tag": "1.4.1-unstable50-171005164021"
                    },
                    "imagePullPolicy": "ALWAYS",
                    "limits": {

                    },
                    "livenessProbe": {
                        "failureThreshold": 3,
                        "handler": {
                            "execAction": {
                                "commands": [

                                ]
                            },
                            "httpGetAction": {
                                "path": "/health",
                                "port": 8080,
                                "uriScheme": "HTTP"
                            },
                            "tcpSocketAction": {
                                "port": 80
                            },
                            "type": "HTTP"
                        },
                        "initialDelaySeconds": 16,
                        "periodSeconds": 30,
                        "successThreshold": 1,
                        "timeoutSeconds": 1
                    },
                    "name": "hotel-availabilities-ingestion",
                    "ports": [{
                        "containerPort": 8080,
                        "name": "http",
                        "protocol": "TCP"
                    }],
                    "readinessProbe": {
                        "failureThreshold": 3,
                        "handler": {
                            "execAction": {
                                "commands": [

                                ]
                            },
                            "httpGetAction": {
                                "path": "/health",
                                "port": 8080,
                                "uriScheme": "HTTP"
                            },
                            "tcpSocketAction": {
                                "port": 80
                            },
                            "type": "HTTP"
                        },
                        "initialDelaySeconds": 15,
                        "periodSeconds": 5,
                        "successThreshold": 1,
                        "timeoutSeconds": 1
                    },
                    "requests": {

                    },
                    "volumeMounts": [

                    ]
                }],
                "deploy.account.name": "dev",
                "dnsPolicy": "ClusterFirst",
                "events": [

                ],
                "interestingHealthProviderNames": [
                    "KubernetesContainer",
                    "KubernetesPod"
                ],
                "kato.last.task.id": {
                    "id": "42"
                },
                "kato.result.expected": false,
                "kato.task.firstNotFoundRetry": -1,
                "kato.task.notFoundRetryCount": 0,
                "kato.tasks": [{
                    "history": [{
                            "phase": "ORCHESTRATION",
                            "status": "Initializing Orchestration Task..."
                        },
                        {
                            "phase": "ORCHESTRATION",
                            "status": "Processing op: DeployKubernetesAtomicOperation"
                        },
                        {
                            "phase": "DEPLOY",
                            "status": "Initializing creation of replica set."
                        },
                        {
                            "phase": "DEPLOY",
                            "status": "Looking up provided namespace..."
                        },
                        {
                            "phase": "DEPLOY",
                            "status": "Looking up next sequence index for cluster hotelavailabilities..."
                        },
                        {
                            "phase": "DEPLOY",
                            "status": "Found ancestor server group, parsing details (name: hotelavailabilities-v038)"
                        },
                        {
                            "phase": "DEPLOY",
                            "status": "Replica set name chosen to be hotelavailabilities-v039."
                        },
                        {
                            "phase": "DEPLOY",
                            "status": "Building replica set..."
                        }
                    ],
                    "id": "42",
                    "resultObjects": [{
                        "ancestorServerGroupNameByRegion": {
                            "dev": "hotelavailabilities-v038"
                        }
                    }],
                    "status": {
                        "completed": false,
                        "failed": false
                    }
                }],
                "loadBalancers": [
                    "hotelavailabilities"
                ],
                "name": "Deploy in dev",
                "namespace": "dev",
                "nodeSelector": {

                },
                "notification.type": "createdeploy",
                "podAnnotations": {

                },
                "provider": "kubernetes",
                "region": "dev",
                "replicaSetAnnotations": {

                },
                "securityGroups": [

                ],
                "source": {
                    "account": "dev",
                    "asgName": "hotelavailabilities-v038",
                    "region": "dev",
                    "serverGroupName": "hotelavailabilities-v038",
                    "useSourceCapacity": null
                },
                "stageDetails": {
                    "isSynthetic": true,
                    "name": "Deploy in dev",
                    "startTime": 1507291289688,
                    "type": "createServerGroup"
                },
                "strategy": "highlander",
                "targetSize": 1,
                "terminationGracePeriodSeconds": 30,
                "type": "createServerGroup",
                "volumeSources": [

                ]
            },
            "endTime": null,
            "id": "5ac1d97a-d53b-4799-b21f-93ba9e739f32",
            "lastModified": null,
            "name": "Deploy in dev",
            "outputs": {

            },
            "parentStageId": "eb20ff2b-99dd-4049-ab91-21acd50cfeee",
            "refId": "1=1",
            "requisiteStageRefIds": [

            ],
            "scheduledTime": null,
            "startTime": 1507291289688,
            "status": "RUNNING",
            "syntheticStageOwner": "STAGE_BEFORE",
            "tasks": [{
                    "endTime": 1507291289728,
                    "id": "1",
                    "implementingClass": "com.netflix.spinnaker.orca.kato.pipeline.strategy.DetermineSourceServerGroupTask",
                    "loopEnd": false,
                    "loopStart": false,
                    "name": "determineSourceServerGroup",
                    "stageEnd": false,
                    "stageStart": true,
                    "startTime": 1507291289696,
                    "status": "SUCCEEDED"
                },
                {
                    "endTime": 1507291289764,
                    "id": "2",
                    "implementingClass": "com.netflix.spinnaker.orca.clouddriver.tasks.DetermineHealthProvidersTask",
                    "loopEnd": false,
                    "loopStart": false,
                    "name": "determineHealthProviders",
                    "stageEnd": false,
                    "stageStart": false,
                    "startTime": 1507291289739,
                    "status": "SUCCEEDED"
                },
                {
                    "endTime": 1507291289869,
                    "id": "3",
                    "implementingClass": "com.netflix.spinnaker.orca.clouddriver.tasks.servergroup.CreateServerGroupTask",
                    "loopEnd": false,
                    "loopStart": false,
                    "name": "createServerGroup",
                    "stageEnd": false,
                    "stageStart": false,
                    "startTime": 1507291289775,
                    "status": "SUCCEEDED"
                },
                {
                    "endTime": null,
                    "id": "4",
                    "implementingClass": "com.netflix.spinnaker.orca.clouddriver.tasks.MonitorKatoTask",
                    "loopEnd": false,
                    "loopStart": false,
                    "name": "monitorDeploy",
                    "stageEnd": false,
                    "stageStart": false,
                    "startTime": 1507291289880,
                    "status": "RUNNING"
                },
                {
                    "endTime": null,
                    "id": "5",
                    "implementingClass": "com.netflix.spinnaker.orca.clouddriver.tasks.servergroup.ServerGroupCacheForceRefreshTask",
                    "loopEnd": false,
                    "loopStart": false,
                    "name": "forceCacheRefresh",
                    "stageEnd": false,
                    "stageStart": false,
                    "startTime": null,
                    "status": "NOT_STARTED"
                },
                {
                    "endTime": null,
                    "id": "6",
                    "implementingClass": "com.netflix.spinnaker.orca.clouddriver.tasks.instance.WaitForUpInstancesTask",
                    "loopEnd": false,
                    "loopStart": false,
                    "name": "waitForUpInstances",
                    "stageEnd": false,
                    "stageStart": false,
                    "startTime": null,
                    "status": "NOT_STARTED"
                },
                {
                    "endTime": null,
                    "id": "7",
                    "implementingClass": "com.netflix.spinnaker.orca.clouddriver.tasks.servergroup.ServerGroupCacheForceRefreshTask",
                    "loopEnd": false,
                    "loopStart": false,
                    "name": "forceCacheRefresh",
                    "stageEnd": false,
                    "stageStart": false,
                    "startTime": null,
                    "status": "NOT_STARTED"
                },
                {
                    "endTime": null,
                    "id": "8",
                    "implementingClass": "com.netflix.spinnaker.orca.igor.tasks.GetCommitsTask",
                    "loopEnd": false,
                    "loopStart": false,
                    "name": "getCommits",
                    "stageEnd": true,
                    "stageStart": false,
                    "startTime": null,
                    "status": "NOT_STARTED"
                }
            ],
            "type": "createServerGroup"
        },
        {
            "context": {
                "allowDeleteActive": true,
                "cloudProvider": "kubernetes",
                "cluster": "hotelavailabilities",
                "credentials": "dev",
                "interestingHealthProviderNames": [
                    "KubernetesContainer",
                    "KubernetesPod"
                ],
                "namespace": "dev",
                "retainLargerOverNewer": false,
                "shrinkToSize": 1
            },
            "endTime": null,
            "id": "6bd2b0be-f293-41a5-a6eb-2b5710cb24c1",
            "lastModified": null,
            "name": "shrinkCluster",
            "outputs": {

            },
            "parentStageId": "5ac1d97a-d53b-4799-b21f-93ba9e739f32",
            "refId": "1=1>1",
            "requisiteStageRefIds": [

            ],
            "scheduledTime": null,
            "startTime": null,
            "status": "NOT_STARTED",
            "syntheticStageOwner": "STAGE_AFTER",
            "tasks": [

            ],
            "type": "shrinkCluster"
        },
        {
            "context": {
                "clusters": [{
                    "account": "dev",
                    "application": "hotelavailabilities",
                    "cloudProvider": "kubernetes",
                    "containers": [{
                        "args": [

                        ],
                        "command": [

                        ],
                        "envVars": [{
                                "name": "RABBITMQ_HOST",
                                "value": "rabbitmq-service"
                            },
                            {
                                "name": "RABBITMQ_PORT",
                                "value": "5672"
                            },
                            {
                                "name": "RABBITMQ_VHOST",
                                "value": "/"
                            },
                            {
                                "envSource": {
                                    "secretSource": {
                                        "key": "username",
                                        "secretName": "rabbitmq-secret"
                                    }
                                },
                                "name": "RABBITMQ_USERNAME"
                            },
                            {
                                "envSource": {
                                    "secretSource": {
                                        "key": "password",
                                        "secretName": "rabbitmq-secret"
                                    }
                                },
                                "name": "RABBITMQ_PASSWORD"
                            }
                        ],
                        "imageDescription": {
                            "account": "private-registry",
                            "fromTrigger": true,
                            "imageId": "docker.weekendesk.com:5000/hotel-availabilities-ingestion:.*-unstable[0-9]+-.+",
                            "registry": "docker.weekendesk.com:5000",
                            "repository": "hotel-availabilities-ingestion",
                            "tag": ".*-unstable[0-9]+-.+"
                        },
                        "imagePullPolicy": "ALWAYS",
                        "limits": {

                        },
                        "livenessProbe": {
                            "failureThreshold": 3,
                            "handler": {
                                "execAction": {
                                    "commands": [

                                    ]
                                },
                                "httpGetAction": {
                                    "path": "/health",
                                    "port": 8080,
                                    "uriScheme": "HTTP"
                                },
                                "tcpSocketAction": {
                                    "port": 80
                                },
                                "type": "HTTP"
                            },
                            "initialDelaySeconds": 16,
                            "periodSeconds": 30,
                            "successThreshold": 1,
                            "timeoutSeconds": 1
                        },
                        "name": "hotel-availabilities-ingestion",
                        "ports": [{
                            "containerPort": 8080,
                            "name": "http",
                            "protocol": "TCP"
                        }],
                        "readinessProbe": {
                            "failureThreshold": 3,
                            "handler": {
                                "execAction": {
                                    "commands": [

                                    ]
                                },
                                "httpGetAction": {
                                    "path": "/health",
                                    "port": 8080,
                                    "uriScheme": "HTTP"
                                },
                                "tcpSocketAction": {
                                    "port": 80
                                },
                                "type": "HTTP"
                            },
                            "initialDelaySeconds": 15,
                            "periodSeconds": 5,
                            "successThreshold": 1,
                            "timeoutSeconds": 1
                        },
                        "requests": {

                        },
                        "volumeMounts": [

                        ]
                    }],
                    "dnsPolicy": "ClusterFirst",
                    "events": [

                    ],
                    "interestingHealthProviderNames": [
                        "KubernetesContainer",
                        "KubernetesPod"
                    ],
                    "loadBalancers": [
                        "hotelavailabilities"
                    ],
                    "namespace": "dev",
                    "nodeSelector": {

                    },
                    "podAnnotations": {

                    },
                    "provider": "kubernetes",
                    "region": "dev",
                    "replicaSetAnnotations": {

                    },
                    "securityGroups": [

                    ],
                    "strategy": "highlander",
                    "targetSize": 1,
                    "terminationGracePeriodSeconds": 30,
                    "volumeSources": [

                    ]
                }],
                "stageDetails": {
                    "isSynthetic": false,
                    "name": "Deploy",
                    "startTime": 1507291289668,
                    "type": "deploy"
                }
            },
            "endTime": null,
            "id": "eb20ff2b-99dd-4049-ab91-21acd50cfeee",
            "lastModified": null,
            "name": "Deploy",
            "outputs": {

            },
            "parentStageId": null,
            "refId": "1",
            "requisiteStageRefIds": [

            ],
            "scheduledTime": null,
            "startTime": 1507291289668,
            "status": "RUNNING",
            "syntheticStageOwner": null,
            "tasks": [{
                "endTime": null,
                "id": "1",
                "implementingClass": "com.netflix.spinnaker.orca.kato.pipeline.ParallelDeployStage$CompleteParallelDeployTask",
                "loopEnd": false,
                "loopStart": false,
                "name": "completeParallelDeploy",
                "stageEnd": true,
                "stageStart": true,
                "startTime": null,
                "status": "NOT_STARTED"
            }],
            "type": "deploy"
        }
    ],
    "startTime": 1507291289652,
    "status": "RUNNING",
    "trigger": {
        "account": "private-registry",
        "buildInfo": {
            "taggedImages": [{
                "registry": "docker.weekendesk.com:5000",
                "repository": "hotel-availabilities-ingestion",
                "tag": "1.4.1-unstable50-171005164021"
            }]
        },
        "description": "(Docker Registry) private-registry: hotel-availabilities-ingestion",
        "enabled": true,
        "notifications": [

        ],
        "registry": "docker.weekendesk.com:5000",
        "repository": "hotel-availabilities-ingestion",
        "tag": "1.4.1-unstable50-171005164021",
        "type": "manual",
        "user": "[anonymous]"
    }
}